@using voonex.web.Services
@using voonex.api.client
@using Microsoft.AspNetCore.SignalR.Client
@using voonex.signalr.Hubs
@implements IAsyncDisposable

<MudContainer Style="height:100%;">
    <div class="d-flex flex-column justify-space-between py-3" style="height:100%;">
        <MudGrid>
            @foreach (var message in _messages)
            {
                <MudItem xs="1">
                    @message.SenderName
                </MudItem>
                <MudItem xs="11">
                    @message.Content
                </MudItem>
            }
        </MudGrid>
        <MudForm @ref="@_form">
            <div class="d-flex flex-row">
                <MudTextField Class="pr-3" @bind-Value="@_model.Message"/>
                <MudIconButton
                    Class="rounded-pill"
                    Icon="@Icons.Filled.Send"
                    Variant="Variant.Text"
                    Color="Color.Primary"
                    OnClick="@OnSendChatMessage"/>
            </div>

        </MudForm>
    </div>

</MudContainer>

@code {
    private readonly List<GetChatMessagesResponse> _messages = new();

    [Parameter]
    public Guid ServerId { get; set; }

    [Inject]
    public ClientFactory ClientFactory { get; set; } = null!;

    [Inject]
    public HubConnection HubConnection { get; set; } = null!;

    private async Task OnSendChatMessage()
    {
        if (string.IsNullOrEmpty(_model.Message))
        {
            return;
        }

        var client = ClientFactory.CreateClient();
        await client.SendChatMessageAsync(new SendMessageRequest()
        {
            ServerId = ServerId,
            Message = _model.Message
        });

        _model.Message = "";
    }

    private MudForm _form = null!;
    private readonly ChatMessageModel _model = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (HubConnection.State == HubConnectionState.Connected)
        {
            HubConnection.Remove(nameof(IChatHub.ChatUpdated));
            await HubConnection.InvokeAsync(nameof(ChatHub.LeaveChat), ServerId);
            await HubConnection.StopAsync();
            _messages.Clear();
        }
        
        var client = ClientFactory.CreateClient();
        _messages.AddRange(await client.GetChatMessagesAsync(ServerId));
        
        await HubConnection.StartAsync();
        await HubConnection.InvokeAsync(nameof(ChatHub.JoinChat), ServerId);
        HubConnection.On<ChatUpdateDto>(nameof(IChatHub.ChatUpdated), OnChatUpdate);
    }

    private void OnChatUpdate(ChatUpdateDto chatUpdateDto)
    {
        _messages.Add(new GetChatMessagesResponse()
        {
            Content = chatUpdateDto.Content,
            SenderName = chatUpdateDto.UserName,
        });
        InvokeAsync(StateHasChanged);
    }

    public class ChatMessageModel
    {
        public string Message { get; set; } = "";
    }

    public async ValueTask DisposeAsync()
    {
        HubConnection.Remove(nameof(IChatHub.ChatUpdated));
        await HubConnection.InvokeAsync(nameof(ChatHub.LeaveChat), ServerId);
        await HubConnection.StopAsync();
        await HubConnection.DisposeAsync();
    }

}